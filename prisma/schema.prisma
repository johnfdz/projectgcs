// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum UserRole {
  ADMIN
  CLIENT
}

model Event {
  id        String      @id @default(uuid())
  comment   String
  start     DateTime
  end       DateTime
  serviceId Int
  service   Services    @relation(fields: [serviceId], references: [id])
  status    EventStatus @default(PENDING)
  clientId  String
  client    User        @relation(fields: [clientId], references: [id])
  createdAt DateTime    @default(now())

  @@map("events")
}

model Services {
  id        Int      @id
  name      String
  price     Float
  duration  Int
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  Event     Event[]

  @@map("services")
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  status        Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  role          UserRole  @default(CLIENT)
  events        Event[]
  createdAt     DateTime  @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
